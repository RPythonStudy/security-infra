input {
  beats {
    port => 5044
  }
  # 필요하다면 기존 file input도 함께 사용 가능
  # file {
  #   path => "/var/log/syslog"
  #   start_position => "beginning"
  #   sincedb_path => "/dev/null"
  # }
}

filter {
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:log_time} %{HOSTNAME:hostname} %{WORD:process}\[%{NUMBER:pid}\]: %{GREEDYDATA:summary}" }
    tag_on_failure => [ "_grokparsefailure" ]
  }
  # log_time에서 'YYYY-MM-DD HH:MM:SS'만 추출 (공백 또는 T 기준 split)
  ruby {
    code => '
      if event.get("log_time")
        t = event.get("log_time").to_s
        # "2025-06-29T23:06:00.732869+09:00" or "2025-06-29 23:06:00.732869+09:00"
        d, tm = t.split(/[T ]/)
        if tm
          event.set("short_time", "#{d} #{tm[0..7]}")
        else
          event.set("short_time", t[0..18])
        end
      end
    '
  }
  json {
    source => "summary"
    target => "summary_json"
    skip_on_invalid_json => true
  }
  if [summary_json][message] {
    mutate {
      replace => { "summary" => "%{[summary_json][message]}" }
    }
  }
  mutate {
    remove_field => ["summary_json"]
    gsub => [
      "summary", "\b\d{8}\b", "******"
    ]
  }
}
output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]  # docker compose 내부면 서비스명, 외부면 IP:PORT
    index => "syslog-%{+YYYY.MM.dd}"
  }

  stdout {
    codec => line {
      format => "%{short_time} | %{process}[%{pid}] | %{summary}"
    }
  }
}
