services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms${ES_MEM} -Xmx${ES_MEM}" # .env file should define ES_MEM
      discovery.type: single-node
      TZ: Asia/Seoul
    mem_limit: ${ES_MEM_LIMIT:-1792m}
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -fs http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./docker/elk/esdata:/usr/share/elasticsearch/data
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - elknet

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    environment:
      TZ: Asia/Seoul
    mem_limit: ${KB_MEM_LIMIT}
    ports:
      - "5601:5601"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - elknet

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.2
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      LS_JAVA_OPTS: "-Xms${LS_MEM} -Xmx${LS_MEM}"
      TZ: Asia/Seoul
    mem_limit: ${LS_MEM_LIMIT}
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./docker/elk/logstash/pipeline:/usr/share/logstash/pipeline
      - /var/log:/var/log:ro
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - elknet

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KC_HEAP: ${KC_HEAP}
      TZ: Asia/Seoul
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: dev-mem
    mem_limit: ${KC_MEM_LIMIT}
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./docker/keycloak/data:/opt/keycloak/data
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    command: start-dev
    networks:
      - backend

  bitwarden:
    image: ghcr.io/bitwarden/self-host:latest
    container_name: bitwarden
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/bitwarden/bw-data:/data
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    environment:
      ADMIN_TOKEN: "A_VERY_LONG_RANDOM_STRING_32CHARS"
      TZ: Asia/Seoul

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    cap_add:
      - IPC_LOCK
    mem_limit: ${VT_MEM_LIMIT}
    ports:
      - "8200:8200"
    environment:
      # VAULT_LOCAL_CONFIG: '{ "storage": {"file": {"path": "/vault/file"}}, "listener": [ {"tcp": { "address": "0.0.0.0:8200", "tls_cert_file": "/vault/certs/vault.crt", "tls_key_file": "/vault/certs/vault.key"}} ], "default_lease_ttl": "168h", "max_lease_ttl": "720h", "ui": true }'
      VAULT_API_ADDR: "https://vault:8200"
      TZ: Asia/Seoul
    volumes:
      - ./docker/vault/file:/vault/file
      - ./docker/vault/config:/vault/config
      - ./docker/vault/certs:/vault/certs
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    command: >
      sh -c "
        cp /vault/certs/vault.crt /etc/ssl/certs/vault.crt 2>/dev/null || true;
        cat /vault/certs/vault.crt >> /etc/ssl/certs/ca-certificates.crt 2>/dev/null || true;
        vault server -config=/vault/config/vault.hcl
      "
    networks:
      - backend

  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    mem_limit: ${LD_MEM_LIMIT}
    ports:
      - "389:389"
      - "636:636"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./docker/openldap/data:/var/lib/ldap
      - ./docker/openldap/config:/etc/ldap/slapd.d
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - backend

networks:
  elknet:
    driver: bridge
  backend:
    driver: bridge
